<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
##strcmp 
函数原型：
`extern int strcmp(const char *s1,const char *s2); `
所在头文件:`string.h` 

用于比较两个字符串是否相等，相等则返回0，当s1 < s2时，返回为负数，当s1>s2时，返回正数。
两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇'\0'为止。
##strncmp
函数原型：
`int strncmp ( const char * str1, const char * str2, size_t num ); `
所在头文件:`string.h` 

用于比较str1和str2的前num个字符是否相等，相等返回0。
##strcat_s 来源百科
函数原型：
`errno_t strcat_s(char *strDestination,size_t numberOfElements,constchar *strSource);`
头文件：

1. C：string.h
2. C++：cstring

函数作用：C/C++中，用于连接两个字符串的标准库函数，是strcat函数的增强版本。

`char   szBuf[3] = {0};`
`strcat_s(szBuf, 3, "kdfdfj");     // 第一种连接字符串方法`
`strcat(szBuf, "kdfdfj");       // 第二种连接字符串方法 `

> 对于这两个例句，你仔细看就会发现他们有缓冲区溢出的问题.
而用第一个函数则不同，它会抛出一个异常。
但使用第二个函数的结果则不能确定，因为它可能会错误地改变了程序中其他部分的内存的数据，有可能不会抛出异常,但会导致程序数据错误，也可能由于非法内存访问抛出异常。
##strrchr
函数原型：
`char *strrchr(const char *str, char c);`
所在头文件：
`string.h`  
函数功能：
C语言函数，用于查找一个字符c在另一个字符串str中末次出现的位置（也就是从str的右侧开始查找字符c首次出现的位置），并返回这个位置的地址。如果未能找到指定字符，那么函数将返回NULL。
##strstr
函数原型：
`extern char *strstr(char *str1, const char *str2);`
所在头文件：`string.h`  
函数作用：若str2是str1的子串，则返回str2在str1的首次出现的地址；如果str2不是str1的子串，则返回NULL。  
##strtok、strtok_s
关于这部分内容，网上有一篇不错的帖子，可以参考[这里](http://blog.csdn.net/hustfoxy/article/details/23473805)
http://blog.csdn.net/hustfoxy/article/details/23473805


<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h2 id="strcmp">strcmp</h2>

<p>函数原型：
<code>extern int strcmp(const char *s1,const char *s2);</code>
所在头文件:<code>string.h</code> </p>

<p>用于比较两个字符串是否相等，相等则返回0，当s1 &lt; s2时，返回为负数，当s1&gt;s2时，返回正数。
两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇'\0'为止。</p>

<h2 id="strncmp">strncmp</h2>

<p>函数原型：
<code>int strncmp ( const char * str1, const char * str2, size_t num );</code>
所在头文件:<code>string.h</code> </p>

<p>用于比较str1和str2的前num个字符是否相等，相等返回0。</p>

<h2 id="strcat_s">strcat_s 来源百科</h2>

<p>函数原型：
<code>errno_t strcat_s(char *strDestination,size_t numberOfElements,constchar *strSource);</code>
头文件：</p>

<ol>
<li>C：string.h</li>
<li>C++：cstring</li>
</ol>

<p>函数作用：C/C++中，用于连接两个字符串的标准库函数，是strcat函数的增强版本。</p>

<p><code>char   szBuf[3] = {0};</code>
<code>strcat_s(szBuf, 3, "kdfdfj");     // 第一种连接字符串方法</code>
<code>strcat(szBuf, "kdfdfj");       // 第二种连接字符串方法</code></p>

<blockquote>
  <p>对于这两个例句，你仔细看就会发现他们有缓冲区溢出的问题.
  而用第一个函数则不同，它会抛出一个异常。
  但使用第二个函数的结果则不能确定，因为它可能会错误地改变了程序中其他部分的内存的数据，有可能不会抛出异常,但会导致程序数据错误，也可能由于非法内存访问抛出异常。</p>
</blockquote>

<h2 id="strrchr">strrchr</h2>

<p>函数原型：
<code>char *strrchr(const char *str, char c);</code>
所在头文件：
<code>string.h</code> <br>
函数功能：
C语言函数，用于查找一个字符c在另一个字符串str中末次出现的位置（也就是从str的右侧开始查找字符c首次出现的位置），并返回这个位置的地址。如果未能找到指定字符，那么函数将返回NULL。</p>

<h2 id="strstr">strstr</h2>

<p>函数原型：
<code>extern char *strstr(char *str1, const char *str2);</code>
所在头文件：<code>string.h</code> <br>
函数作用：若str2是str1的子串，则返回str2在str1的首次出现的地址；如果str2不是str1的子串，则返回NULL。  </p>

<h2 id="strtokstrtok_s">strtok、strtok_s</h2>

<p>关于这部分内容，网上有一篇不错的帖子，可以参考<a href="http://blog.csdn.net/hustfoxy/article/details/23473805">这里</a>
http://blog.csdn.net/hustfoxy/article/details/23473805</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "c_string.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
